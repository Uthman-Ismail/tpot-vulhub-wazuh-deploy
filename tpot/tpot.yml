---
################################
# T-Pot - Bootstrapping Python #
################################

- name: T-Pot - Bootstrapping Python
  hosts: all
  gather_facts: false
  become: true
  become_method: sudo

  tasks:
    - name: Get distribution name (All)
      raw: awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"' | cut -d " " -f1
      register: my_distribution

    - name: Check if python3 is installed (All)
      raw: echo $(command -v python3)
      register: my_python3

    - name: Add python package (Debian, Raspbian, Ubuntu)
      raw: |
        apt update
        apt -y install python3
      when: my_distribution.stdout | trim in "Debian" and my_python3.stdout | trim == ""

#####################################################################
# T-Pot - Abort if run as tpot, root or on unsupported distribution #
#####################################################################

- name: T-Pot - Abort if run as tpot, root or on unsupported distribution
  hosts: all
  gather_facts: true
  become: false
  tasks:
    - name: Check if running as root (All)
      assert:
        that: ansible_user_id != 'root'
        fail_msg: "T-Pot playbook should not be run as root."
        success_msg: "Running as user: {{ ansible_user_id }}."

    - name: Check if running as tpot (All)
      assert:
        that: ansible_user_id != 'tpot'
        fail_msg: "Reserved username `tpot` detected."
        success_msg: "Running as user: {{ ansible_user_id }}."

    - name: Check if supported distribution (All)
      assert:
        that: ansible_distribution in "Debian"
        fail_msg: "T-Pot is not supported on this plattform: {{ ansible_distribution }}."
        success_msg: "T-Pot will now install on {{ ansible_distribution }}."
    
############################################################
# T-Pot - Install recommended, remove conflicting packages #
############################################################

- name: T-Pot - Install recommended, remove conflicting packages 
  hosts: all
  gather_facts: true
  become: true

  tasks:
    - name: Syncing clocks (All)
      shell: "hwclock --hctosys"
      when: ansible_distribution in "Debian"
      ignore_errors: true

    - name: Install recommended packages (Debian)
      package:
        name:
          - apache2-utils
          - bash-completion
          - ca-certificates
          - cracklib-runtime
          - cron
          - curl
          - git
          - gnupg
          - grc
          - htop
          - micro
          - net-tools
          - vim
          - wget
        state: latest
        update_cache: yes
      when: ansible_distribution in "Debian"

    - name: Install exa (Debian)
      package:
        name:
          - exa
        state: latest
        update_cache: yes
      register: exa_install_result
      ignore_errors: yes
      when: ansible_distribution in "Debian"

    - name: Install eza (if exa failed)
      package:
        name:
          - eza
        state: latest
        update_cache: yes
      when: exa_install_result is failed

#####################################
# T-Pot - Prepare for Docker Engine #
#####################################

- name: T-Pot - Prepare for and install Docker Engine
  hosts: all
  gather_facts: true
  become: true

  tasks:
    - name: Remove distribution based Docker packages and podman-docker (Debian)
      package:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
          - podman-docker
          - podman
        state: absent
        update_cache: yes
      when: ansible_distribution in "Debian"

    - name: Add folder for Docker Engine GPG key (Debian)
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755
      when: ansible_distribution in "Debian"

    - name: Download Docker Engine GPG key (Debian)
      get_url:
        url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
        dest: /etc/apt/keyrings/docker
        mode: 0755
      when: ansible_distribution in "Debian"

    - name: Decrypt Docker Engine GPG key (Debian)
      shell: gpg --dearmor /etc/apt/keyrings/docker
      args:
        creates: /etc/apt/keyrings/docker.gpg
      when: ansible_distribution in "Debian"

    - name: Add Docker Engine repository (Debian)
      apt_repository:
        filename: docker
        repo: "deb [arch={{ ansible_architecture | replace('aarch64', 'arm64') | replace('x86_64', 'amd64') }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes
      when: ansible_distribution in "Debian"

#################################
# T-Pot - Install Docker Engine #
#################################

- name: T-Pot - Install Docker Engine
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Install Docker Engine packages (Debian)
      package:
        name:
          - docker-ce 
          - docker-ce-cli 
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin 
        state: latest
        update_cache: yes
      when: ansible_distribution in "Debian"

    - name: Stop Docker (All)
      service:
        name: docker
        state: stopped
        enabled: false
      when: ansible_distribution in "Debian"

######################################################
# T-Pot - Adjust configs, add users and groups, etc. #
######################################################

- name: T-Pot - Adjust configs, add users and groups, etc.
  hosts: all
  gather_facts: true
  become: true

  tasks:
    - name: Create T-Pot group (All)
      group:
        name: tpot
        gid: 2000
        state: present
      when: ansible_distribution in "Debian"

    - name: Create T-Pot user (All)
      user:
        name: tpot
        uid: 2000
        system: yes
        shell: /bin/false
        home: /nonexistent
        group: tpot
      when: ansible_distribution in "Debian"

    - name: Change SSH Port to 64295 (Debian)
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "Port 64295"
        insertafter: EOF
      when: ansible_distribution in "Debian"

############################
# T-Pot - Restart services #
############################

- name: T-Pot - Restart services
  hosts: all
  gather_facts: true
  become: true

  tasks:
    - name: Enable Docker Engine upon boot (All)
      service:
        name: docker
        state: restarted
        enabled: true
      when: ansible_distribution in "Debian"

    - name: Restart SSH (All)
      service:
        name: "{{ 'sshd' }}"
        state: restarted
        enabled: true
      when: ansible_distribution in "Debian"

#######################################################################
# T-Pot - Adjust group users, bashrc, clone / update T-Pot repository #
#######################################################################

- name: T-Pot - Adjust group users, bashrc, clone / update T-Pot repository
  hosts: all
  gather_facts: true
  become: false

  tasks:
    - name: Check for non-root user id (All)
      debug:
        msg: "Detected user: '{{ ansible_user_id }}'"
      when: ansible_distribution in "Debian"
      failed_when: ansible_user_id == "root"

    - name: Add aliases with exa (All)
      blockinfile:
        path: ~/.bashrc
        block: |
          alias dps='grc --colour=on docker ps -f status=running -f status=exited --format "table {{'{{'}}.Names{{'}}'}}\\t{{'{{'}}.Status{{'}}'}}\\t{{'{{'}}.Ports{{'}}'}}" | sort'
          alias dpsw='watch -c bash -ic dps'
          alias mi='micro'
          alias sudo='sudo '
          alias ls='exa'
          alias ll='exa -hlg'
          alias la='exa -hlag'
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        insertafter: EOF
        state: present
      when: exa_install_result is succeeded and ansible_distribution in "Debian"

    - name: Add aliases with eza (Debian)
      blockinfile:
        path: ~/.bashrc
        block: |
          alias dps='grc --colour=on docker ps -f status=running -f status=exited --format "table {{'{{'}}.Names{{'}}'}}\\t{{'{{'}}.Status{{'}}'}}\\t{{'{{'}}.Ports{{'}}'}}" | sort'
          alias dpsw='watch -c bash -ic dps'
          alias mi='micro'
          alias sudo='sudo '
          alias ls='eza'
          alias ll='eza -hlg'
          alias la='eza -hlag'
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        insertafter: EOF
        state: present
      when: exa_install_result is failed and ansible_distribution in "Debian"

    - name: Clone / Update T-Pot repository (All)
      git:
        repo: 'https://github.com/telekom-security/tpotce'
        dest: '/home/{{ ansible_user_id }}/tpotce/'
        version: master
        clone: yes
        update: no
      when: ansible_distribution in "Debian"

    - name: Add current user to Docker, T-Pot group (All)
      become: true
      user:
        name: "{{ ansible_user_id }}"
        groups: 
          - docker
          - tpot
        append: yes
      when: ansible_distribution in "Debian"

########################################
# T-Pot - Install service and cron job #
########################################

- name: T-Pot - Install service
  hosts: all
  gather_facts: true
  become: false

  tasks:
    - name: Install systemd service (All)
      become: true
      ansible.builtin.template:
        src: 'tpot.service'
        dest: '/etc/systemd/system/tpot.service'
        owner: root
        group: root
        mode: '0755'
      notify: Reload systemd and enable service
      when: ansible_distribution in "Debian"

  handlers:
    - name: Reload systemd and enable service
      become: true
      ansible.builtin.systemd:
        name: tpot.service
        daemon_reload: yes
        state: stopped
        enabled: yes
      when: ansible_distribution in "Debian"

- name: T-Pot - Setup a randomized daily reboot
  hosts: all
  gather_facts: true
  become: yes

  vars:
    random_minute: "{{ range(0, 60) | random }}"
    random_hour: "{{ range(0, 5) | random }}" # We want the reboot randomly happen at night

  tasks:
    - name: Setup a randomized daily reboot (All)
      cron:
        name: "T-Pot Daily Reboot"
        user: root
        minute: "{{ random_minute }}"
        hour: "{{ random_hour }}"
        job: "bash -c 'systemctl stop tpot.service && docker container prune -f; docker image prune -f; docker volume prune -f; /usr/sbin/shutdown -r +1 \"T-Pot Daily Reboot\"'"
        state: present
      when: ansible_distribution in "Debian"

- name: Configure and Deploy T-Pot
  hosts: all
  become: true

  vars:
    web_username: "admin"
    web_password: "admin"

  tasks:
    # 1. Copy standard.yml to docker-compose.yml
    - name: Copy T-Pot standard.yml to docker-compose.yml
      copy:
        src: '/home/uthman/tpotce/compose/standard.yml'
        dest: '/home/uthman/tpotce/docker-compose.yml'
        remote_src: yes

    # 2. Generate Base64-Encoded WEB_USER Credentials
    - name: Generate base64-encoded WEB_USER credentials
      shell: |
        myWEB_USER_ENC=$(htpasswd -b -n "{{ web_username }}" "{{ web_password }}")
        echo -n "${myWEB_USER_ENC}" | base64 -w0
      register: web_user_enc_b64

    # 2. Generate Base64-Encoded Credentials
    - name: Generate base64-encoded WEB_USER credentials
      shell: |
        echo $(htpasswd -n -b "{{ web_username }}" "{{ web_password }}" | base64 -w0)
      register: web_user_enc

    # 3. Write Credentials to .env File
    - name: Update WEB_USER in T-Pot config file
      lineinfile:
        path: '/home/uthman/tpotce/.env'
        regexp: '^WEB_USER='
        line: "WEB_USER={{ web_user_enc.stdout }}"
        create: yes

    # 4. Pull Docker Images
    - name: Pull the latest T-Pot Docker images
      shell: sudo docker compose -f '/home/uthman/tpotce/docker-compose.yml' pull

    - name: Reboot
      ansible.builtin.reboot:
      ignore_errors: true
